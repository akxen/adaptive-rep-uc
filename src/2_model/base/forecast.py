"""Generator energy forecasting"""

from data import ModelData


class Forecast:
    def __init__(self):
        self.data = ModelData()

    def get_week_demand(self, year, week):
        """Get total energy demand for a given week"""

        # Demand for a given week - based on demand of previous week
        demand = sum(self.data.demand[(year, week, d)][(z, t)] for d in range(1, 8) for z in self.data.nem_zones
                     for t in range(1, 25))

        return demand

    def get_generator_week_energy_proportion(self, year, week):
        """Get proportion of energy output from each generator for a given week"""

        # Container of DataFrames
        dfs = []

        for day in range(1, 8):
            # Get generator energy output for a given day
            df = self.get_generator_interval_results('e', year, week, day)

            # Append to main container
            dfs.append(df)

        # Concatenate DataFrames
        df_c = pd.concat(dfs)

        # Total energy demand for a given week
        total_demand = self.get_week_demand(year, week)

        # Proportion of energy delivered from each generator
        energy_output_proportion = df_c.sum().div(total_demand).to_dict()

        return energy_output_proportion

    def get_generator_output_proportion(self, generators, year, week):
        """Get proportion of weekly energy output generated by each generator"""
        pass

    def get_persistence_energy_forecast(self, generators, year, week, n_intervals):
        """Assume generator energy output 'week' is same for future calibration intervals"""

        # {generator: {interval: {scenario: {'energy': ..., 'probability': ...}}}}

        pass

    def get_probabilistic_energy_forecast(self, generators, year, week, n_intervals, n_scenarios, monte_scenarios):
        """Get probabilistic energy forecast"""

        # Fit models using available data

        # Get predictions (for each generator)

        # Construct Monte Carlo simulations

        # K-means clustering to get predicted output with corresponding weights

        # {generator: {interval: {scenario: {'energy': ..., 'probability': ...}}}}

    def fit_model(self, generator, year, week):
        """Fit model"""
        pass

